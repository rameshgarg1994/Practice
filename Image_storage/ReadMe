Design an Image Hosting Service 
functional requirement
1. Images should be stored on cloud
2. Images should be compressed but not lose quality
3. Check for duplicate images
4. access auth2.0 / JWT
5. Upload images ( auto sync )
6. organise images
7. Sharing
8. loss less Compression
9. duplicate image check
10. convert to hash


Traffic estimation
1. 1 bill total users 1% active users -> 10 mill
2. 5 photos added by 1 user  in 1 day -> 50 mill /day
3. fetch 100 photos / day  (use CDN for performance improvement)
4. 30 days archival stretegy (TTL) -> 50*30 mill /month
5. 1 photo ~ 1mb 
6. storge = 10mill * 30 * 1 mb * 5  = 1.5PB

storage location structure -> [random_2-10_digit_id]/userId/date/photo_id 
Metadata -> photo_Id : metadata
Duplicate DB -> hash:location
Duplicate image check -> generate hash for each image ->pHash (read more)
Partition -> user_id + date + random

APIs
(Post)AddPhoto( List<byte[]> images,metadata)
(Get)FetchPhoto(FetchDetails (date,folder,category,Pagination))
(Put)SharePhoto(ShareToUserDetails (email))
(Delete)DeletePhoto ( DeleteImagesDetails (List photo_ids)) | batch processing
(Get)CheckDuplicates() | batch processing
(Get)DownloadImages() | batch processing
AsynDelete (TTL) | schduler based

JWT -> header


DB Design
User_Details(id,email,pwd(hash+salt),created_date,last_accesed_date)
Shared_details(id,photo_id,userId,access_type,ttl)
photo_details(id,storage_key,format,user_id,compressed_id,metadata_id,created_at,album_id)
Compressed_details(id,compressedcontent,location)
metadata_details(id,metadata,photo_id,location,size)
Album_details(id,user_id,creaated_at,name,List<photo_ids>)
